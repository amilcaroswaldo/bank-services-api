#Bank Services API - Documentación Técnica Resumen del Proyecto El proyecto Bank Services API se encarga de manejar la lógica de negocio para tarjetas de crédito y estados de cuenta, siguiendo una arquitectura modular y escalable basada en principios de desarrollo ágil y limpio.

----------------------------------------------------------------

Detalle de estrucutra:
*dentro de appsettings estan la cadena de conexion hacia la base de datos.
AL estar trabajado en una arquitectura ONION, tiene muchas carpetas el protecto, defino las mas importantes y sus contenidos.
#creditcard.Domain--aqui se encuentra las rfespuestas de las consultas a la bd
#creditcard.Infraestructure -- aqui esta los querys y commands, dentro queryes estan las clases que solo hacen consulta a la bd. dentro de commands estan las sentencias que modifican la base de datos
#creditcard.application -- dentro de esta carpeta se maneka la logica de negocio. la carpeta que contiene la logica son los usesCases. 
-en esta carpeta tambien se encuentran las interfaces y los handler.
#creditcard.webapi -- carpeta donde se encuentran los controllers, las validaciones, middlewares, entre otras clases importantes.

######en la raiz del proyecto esta la capeta scripts, dentro de ella se encuentra los scripts y sentencias utilizadas para crear la base de datos. 
tambien va el sxript para migrar la base de datos con todas las transacciones que se hizo.
###igualemente dentro de esta carpeta, van las colecciones de postman
----
Arquitectura Onion La arquitectura Onion se implementa para asegurar una separación clara de las preocupaciones y la flexibilidad en la evolución del software. Las capas principales son:

Capa de Dominio:

Contiene las entidades fundamentales del negocio y las interfaces de repositorios. Representa el núcleo de la aplicación, sin depender de ninguna tecnología externa. Capa de Aplicación:

Gestiona la lógica de negocio específica, como la manipulación de datos y las reglas de negocio. Implementa patrones como CQRS, separando comandos y consultas. Capa de Infraestructura:

Provee implementaciones para interfaces de repositorios, utilizando tecnologías como Dapper para el acceso a datos. Incluye servicios externos, manejadores de eventos, y otros elementos de infraestructura. Capa de Presentación:

Expone la API a través de controladores y endpoints, proporcionando interfaces para la interacción con los clientes. CQRS El patrón CQRS se utiliza para separar claramente las operaciones de lectura y escritura:

Comandos: Encapsulan las operaciones que modifican el estado de la aplicación, asegurando un flujo claro y separado de las mutaciones de estado. Consultas: Se encargan de obtener datos sin modificar el estado, optimizando la eficiencia y simplicidad del sistema. Mapper Se utiliza AutoMapper para transformar objetos de dominio a DTOs (Data Transfer Objects) y viceversa. Esto facilita la separación de las capas y asegura que las modificaciones en el dominio no afecten directamente a las capas externas.

Dapper Dapper se implementa como micro ORM para realizar operaciones de acceso a datos de manera eficiente. Su uso es clave para mantener un acceso rápido y ligero a la base de datos, ejecutando consultas SQL directamente.

Buenas Prácticas Inyección de Dependencias: Se utiliza un contenedor IoC para gestionar las dependencias, promoviendo el desacoplamiento y la facilidad de pruebas. Separación de Responsabilidades: Cada capa y componente tiene una responsabilidad clara, siguiendo el principio de Single Responsibility.
